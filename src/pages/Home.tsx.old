import React, { useState, Suspense, lazy, useRef, useCallback, useEffect } from 'react';
import { useAuth } from '@/context/AuthContext';
import { Navigate } from 'react-router-dom';
import { useProfiles, Profile } from '@/hooks/useProfiles';
import Header from '@/components/Layout/Header';
import BottomNav from '@/components/Navigation/BottomNav';
import LandingPage from './LandingPage';
import { Users } from 'lucide-react';
import { Button } from '@/components/ui/button';

// Lazy load components
const ProfileCard = lazy(() => import('@/components/ProfileCard/ProfileCardOptimized'));
const ProfileModal = lazy(() => import('@/components/ProfileModal'));

// IntersectionObserver options
const observerOptions = {
  root: null,
  rootMargin: '100px', // Start loading 100px before the item comes into view
  threshold: 0.1
};

const Home: React.FC = () => {
  const { user } = useAuth();
  const [selectedProfile, setSelectedProfile] = useState<Profile | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const loadMoreRef = useRef<HTMLDivElement>(null);
  const [hasTriggeredInitialLoad, setHasTriggeredInitialLoad] = useState(false);
  const prevProfilesRef = useRef<Profile[]>([]);

  // Get profiles with user's preferences
  const { profiles, loading, hasMore, loadMore, error } = useProfiles(
    user ? {
      gender: user.lookingFor,
      // Add more filters when user preferences are implemented
      // minAge: user.preferences?.minAge,
      // maxAge: user.preferences?.maxAge,
      // location: user.location,
      // maxDistance: user.preferences?.maxDistance
    } : undefined
  );

  // Setup intersection observer for infinite scroll
  useEffect(() => {
    const currentLoadMoreRef = loadMoreRef.current;
    if (!currentLoadMoreRef || !hasMore || loading) return;

    const observer = new IntersectionObserver(([entry]) => {
      if (entry.isIntersecting && hasMore && !loading) {
        loadMore();
      }
    }, observerOptions);

    observer.observe(currentLoadMoreRef);

    return () => {
      if (currentLoadMoreRef) {
        observer.unobserve(currentLoadMoreRef);
      }
    };
  }, [hasMore, loading, loadMore]);

  // Trigger initial load when component mounts
  // Effect to track profile changes and prevent duplicates
  useEffect(() => {
    if (profiles.length > 0) {
      const newIds = new Set(profiles.map(p => p.id));
      const prevIds = new Set(prevProfilesRef.current.map(p => p.id));
      
      // Check for duplicates
      const hasDuplicates = profiles.length !== newIds.size;
      
      if (hasDuplicates) {
        // Remove duplicates while preserving order
        const uniqueProfiles = profiles.filter((profile, index) => 
          profiles.findIndex(p => p.id === profile.id) === index
        );
        prevProfilesRef.current = uniqueProfiles;
      } else {
        prevProfilesRef.current = profiles;
      }
    }
  }, [profiles]);

  // Initial load effect
  useEffect(() => {
    if (!hasTriggeredInitialLoad && user) {
      setHasTriggeredInitialLoad(true);
      loadMore();
    }
  }, [user, hasTriggeredInitialLoad, loadMore]);

  const handleProfileClick = useCallback((profile: Profile) => {
    setSelectedProfile(profile);
    setIsModalOpen(true);
  }, []);

  const handleCloseModal = useCallback(() => {
    setIsModalOpen(false);
    setSelectedProfile(null);
  }, []);

  // Show landing page for non-authenticated users
  if (!user) {
    return <LandingPage />;
  }



  const renderPlaceholders = () => (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
      {[...Array(6)].map((_, i) => (
        <div
          key={i}
          className="h-96 bg-gradient-card rounded-lg animate-pulse"
        />
      ))}
    </div>
  );

  // Error state
  if (error) {
    return (
      <div className="min-h-screen bg-gradient-hero">
        <Header />
        <div className="container mx-auto p-4 pt-8 pb-20 md:pb-8">
          <div className="flex flex-col items-center justify-center space-y-4 py-12">
            <div className="w-16 h-16 rounded-full bg-destructive/10 flex items-center justify-center">
              <Users className="h-8 w-8 text-destructive" />
            </div>
            <h2 className="text-xl font-semibold text-center">Error Loading Profiles</h2>
            <p className="text-muted-foreground text-center max-w-md">
              {error}
            </p>
            <Button onClick={() => window.location.reload()}>
              Try Again
            </Button>
          </div>
        </div>
        <BottomNav />
      </div>
    );
  }

  // Main view
  return (
    <div className="min-h-screen bg-gradient-hero">
      <Header />
      
      <div className="container mx-auto p-4 pt-8 pb-20 md:pb-8">
        {/* Loading State */}
        {loading && profiles.length === 0 && (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
            {Array.from({ length: 8 }).map((_, i) => (
              <div key={i} className="relative bg-card rounded-lg overflow-hidden border border-border/50 animate-pulse">
                <div className="aspect-[3/4] bg-muted" />
                <div className="p-4 space-y-3">
                  <div className="h-4 bg-muted rounded w-3/4" />
                  <div className="h-3 bg-muted rounded w-1/2" />
                  <div className="flex gap-2 pt-2">
                    <div className="h-8 bg-muted rounded flex-1" />
                    <div className="h-8 bg-muted rounded flex-1" />
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* No Profiles State */}
        {!loading && profiles.length === 0 && (
          <div className="flex flex-col items-center justify-center space-y-4 py-12">
            <div className="w-16 h-16 rounded-full bg-primary/10 flex items-center justify-center">
              <Users className="h-8 w-8 text-primary" />
            </div>
            <h2 className="text-xl font-semibold text-center">No Matches Found</h2>
            <p className="text-muted-foreground text-center max-w-md">
              We couldn't find any profiles matching your preferences.
              Try adjusting your filters or check back later.
            </p>
          </div>
        )}

        {/* Profile Grid */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
          {loading && !profiles.length ? (
            renderPlaceholders()
          ) : (
            profiles.map((profile) => (
              <Suspense
                key={profile.id}
                fallback={
                  <div className="relative bg-card rounded-lg overflow-hidden border border-border/50 animate-pulse">
                    <div className="aspect-[3/4] bg-muted" />
                  </div>
                }
              >
                <ProfileCard
                  profile={profile}
                  onClick={() => handleProfileClick(profile)}
                />
              </Suspense>
            ))
          )}
        </div>

        {/* Load More Trigger */}
        {hasMore && (
          <div ref={loadMoreRef} className="py-8 flex justify-center">
            {loading && profiles.length > 0 && (
              <div className="w-8 h-8 border-4 border-primary/30 border-t-primary rounded-full animate-spin" />
            )}
          </div>
        )}
      </div>

      <BottomNav />

      {/* Profile Modal */}
      <Suspense fallback={null}>
        {selectedProfile && (
          <ProfileModal
            profile={selectedProfile}
            isOpen={isModalOpen}
            onClose={handleCloseModal}
          />
        )}
      </Suspense>
    </div>
  );
};

export default Home;