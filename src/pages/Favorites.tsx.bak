import React, { useState, useCallback, memo, Suspense } from 'react';
import { useAuth } from '../context/AuthContext';
import { Profile } from '../types/Profile';
import { useFavoriteProfiles } from '../hooks/useFavoriteProfiles';
import { useProfiles } from '../hooks/useProfiles';
import ProfileCard from '../components/ProfileCard/ProfileCard';
import Header from '../components/Layout/Header';
import BottomNav from '../components/Navigation/BottomNav';
import { Heart, Users, Loader2 } from 'lucide-react';
import { Button } from '../components/ui/button';
import { Alert, AlertCircle, AlertDescription, AlertTitle } from '../components/ui/alert';
import { Skeleton } from '../components/ui/skeleton';

// Memoized ProfileCard to prevent unnecessary re-renders
const MemoizedProfileCard = React.memo(({ profile, onClick }: { profile: Profile, onClick: () => void }) => (
  <div className="animate-fade-in">
    <ProfileCard profile={profile} onClick={onClick} />
  </div>
));

// Lazy loaded components for better initial load performance
const LazyProfileModal = React.lazy(() => import('@/components/ProfileModal'));

// Loading skeleton for profile cards
const ProfileCardSkeleton = () => (
  <div className="bg-card rounded-lg overflow-hidden border border-border/50">
    <Skeleton className="aspect-[3/4] w-full" />
    <div className="p-3 space-y-2">
      <Skeleton className="h-5 w-2/3" />
      <Skeleton className="h-4 w-1/2" />
      <div className="flex gap-2 mt-3">
        <Skeleton className="h-8 flex-1" />
        <Skeleton className="h-8 flex-1" />
      </div>
    </div>
  </div>
);
const PROFILES_PER_PAGE = 20;

/**
 * FAVORITES PAGE - BACKEND INTEGRATION GUIDE
 * 
 * Current Features:
 * - Optimized profile loading with useFavoriteProfiles hook
 * - Local storage caching with 30min expiry
 * - Memoized components for better performance
 * - Progressive loading with Load More
 * - Loading skeletons for better UX
 * 
 * TODO Improvements:
 * - Remove from favorites functionality
 * - Sort options (recent, alphabetical, distance)
 * - Filter options (age, location, interests)
 * - Bulk actions (select multiple, remove all)
 * 
 * Performance Optimizations:
 * - Component memoization
 * - Local storage caching
 * - Progressive loading
 * - Lazy loaded modals
 * - Loading skeletons
 */

// Memoized ProfileCard component to prevent unnecessary re-renders
const MemoizedProfileCard = React.memo(({ profile, onClick }: { profile: Profile, onClick: () => void }) => (
  <div className="animate-fade-in">
    <ProfileCard profile={profile} onClick={onClick} />
  </div>
));

// Lazy loaded ProfileModal for better initial load performance
const LazyProfileModal = React.lazy(() => import('@/components/ProfileModal'));

const Favorites: React.FC = () => {
  const { user, likedProfiles } = useAuth();
  const [selectedProfile, setSelectedProfile] = useState<Profile | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  const {
    profiles: favoriteProfiles,
    isLoading,
    error,
    loadMore,
    hasMore
  } = useFavoriteProfiles({
    likedIds: likedProfiles,
    userId: user?.id
  });

  const handleProfileClick = (profile: Profile) => {
    setSelectedProfile(profile);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedProfile(null);
  };

  if (!user) {
    return null;
  }
      if (!user || !likedProfiles.length) {
        setFavoriteProfiles([]);
        setIsLoading(false);
        return;
      }

      try {
        // First check local storage for cached profiles
        const cachedProfiles = localStorage.getItem('cachedProfiles');
        const profilesMap: Record<string, Profile> = cachedProfiles ? JSON.parse(cachedProfiles) : {};
        let needsUpdate = false;

        // Find which profiles we need to fetch
        const profilesToFetch = likedProfiles.filter(id => !profilesMap[id]);

        if (profilesToFetch.length > 0) {
          const fetchedProfiles = await Promise.all(
            profilesToFetch.map(async (profileId) => {
              const profileRef = ref(database, `profiles/${profileId}`);
              const snapshot = await get(profileRef);
              if (snapshot.exists()) {
                const data = snapshot.val();
                return {
                  id: profileId,
                  ...data
                };
              }
              return null;
            })
          );

          // Update the profiles map with new fetched profiles
          fetchedProfiles.filter(Boolean).forEach(profile => {
            if (profile) {
              profilesMap[profile.id] = profile;
              needsUpdate = true;
            }
          });

          // Save updated cache
          if (needsUpdate) {
            localStorage.setItem('cachedProfiles', JSON.stringify(profilesMap));
          }
        }

        // Filter out profiles that are liked
        const currentFavorites = likedProfiles
          .map(id => profilesMap[id])
          .filter(Boolean);

        setFavoriteProfiles(currentFavorites);
      } catch (error) {
        console.error('Error loading favorite profiles:', error);
      } finally {
        setIsLoading(false);
      }
    };

    loadFavoriteProfiles();
  }, [user, likedProfiles]);

  const handleProfileClick = (profile: Profile) => {
    setSelectedProfile(profile);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedProfile(null);
  };

  if (!user) {
    return null;
  }

  return (
    <div className="min-h-screen bg-gradient-hero">
      <Header />
      
      <div className="container mx-auto p-4 pt-8 pb-20 md:pb-8">
        {isLoading ? (
          <div className="text-center py-12">
            <div className="animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4" />
            <p className="text-white/70">Loading your favorites...</p>
          </div>
        ) : favoriteProfiles.length === 0 ? (
          <div className="text-center py-12">
            <Users className="h-16 w-16 text-white/60 mx-auto mb-4" />
            <h3 className="text-xl font-semibold mb-2 text-white">No favorites yet</h3>
            <p className="text-white/70">
              Start liking profiles to see them here!
            </p>
          </div>
        ) : (
          <>
            <h1 className="text-2xl font-semibold text-white mb-6 flex items-center gap-2">
              <Heart className="h-6 w-6 text-primary" />
              Your Favorites ({favoriteProfiles.length})
            </h1>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-3 md:gap-4">
              {favoriteProfiles
                .slice(0, page * PROFILES_PER_PAGE)
                .map((profile) => (
                  <MemoizedProfileCard
                    key={profile.id}
                    profile={profile}
                    onClick={() => handleProfileClick(profile)}
                  />
              ))}
              {favoriteProfiles.length > page * PROFILES_PER_PAGE && (
                <div className="col-span-full text-center py-4">
                  <button
                    onClick={() => setPage(p => p + 1)}
                    className="px-4 py-2 bg-primary/10 text-primary rounded-md hover:bg-primary/20 transition-colors"
                  >
                    Load More
                  </button>
                </div>
              )}
            </div>
          </>
        )}
      </div>

      {selectedProfile && (
        <ProfileModal 
          profile={selectedProfile}
          isOpen={isModalOpen}
          onClose={handleCloseModal}
        />
      )}
      
      <BottomNav />
    </div>
  );
};

export default Favorites;